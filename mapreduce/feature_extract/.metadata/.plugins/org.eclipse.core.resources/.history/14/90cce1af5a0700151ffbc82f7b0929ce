package my.group.extract_item_feature;

import com.aliyun.odps.data.Record;
import com.aliyun.odps.mapred.Reducer;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

/**
 * Reducer模板。请用真实逻辑替换模板内容
 */
public class MyReducer implements Reducer {
    private Record result;

    public void setup(TaskContext context) throws IOException {
        result = context.createOutputRecord();
    }

    public void reduce(Record key, Iterator<Record> values, TaskContext context) throws IOException {
    	long buy_cnt = 0L, contact_cnt = 0L, buy_user_cnt = 0L, contact_user_cnt = 0L;
    	long[] final_item_beh_hour = new long[4];
    	Map<String, Set> user_buy_time = new TreeMap<String, Set>(),
    			user_contact_time = new TreeMap<String, Set>();
    	Map<String, Long[]> typeCounter = new TreeMap<String, Long[]>();
    	Set buy_user_set = new HashSet(), contact_user_set = new HashSet();
     	while (values.hasNext()) {
     	  Record val = values.next();
     	  String user_id = val.getString("user_id");
     	  String date = val.getString("time");
     	  String day_str = date.substring(0, 10);
     	  int type = Integer.parseInt(val.getString("behavior_type")) - 1;
     	  if(type == 3){
     		  buy_cnt++;
     		  buy_user_set.add(user_id);
     		  
     	  }
     	  else{
     		  contact_cnt++;
     		 contact_user_set.add(user_id);
     	  }
     	  if (typeCounter.containsKey(date)) {
     		typeCounter.get(date)[type]++;
     	  } else {
     		Long[] counter = new Long[]{0L, 0L, 0L, 0L};
     		counter[type]++;
     		typeCounter.put(date, counter);
     	  }
     	}
     	result.set(0, key.getString("item_id"));
    }
    
    public static long getHourSpan(String sj1, String sj2) {
		SimpleDateFormat myFormatter = new SimpleDateFormat("yyyy-MM-dd HH");
        long day = 0;
        try {
        	Date date1 = myFormatter.parse(sj1);
        	Date date2 = myFormatter.parse(sj2);
        	day = (date1.getTime() - date2.getTime()) / (60 * 60 * 1000);
        } catch (Exception e) {
        	return -1;
        }
        return day;
	} 

    public void cleanup(TaskContext arg0) throws IOException {

    }
}
