package my.group.extract_item_feature;

import com.aliyun.odps.data.Record;
import com.aliyun.odps.mapred.Reducer;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

/**
 * Reducer模板。请用真实逻辑替换模板内容
 */
public class MyReducer implements Reducer {
	private Record result;

	public void setup(TaskContext context) throws IOException {
		result = context.createOutputRecord();
	}

	public void reduce(Record key, Iterator<Record> values, TaskContext context)
			throws IOException {
		long buy_cnt = 0L, contact_cnt = 0L, buy_user_cnt = 0L, contact_user_cnt = 0L, back_user_cnt = 0L;
		Set<String> buy_user_set = new HashSet<String>(), contact_user_set = new HashSet<String>();
		Map<String, Set> user_buy_time = new TreeMap<String, Set>();
		long[] final_item_beh_hour = new long[4];
		for(int i = 0; i < 4; ++i)
			final_item_beh_hour[i] = 720L;
		while (values.hasNext()) {
			Record val = values.next();
			String user_id = val.getString("user_id");
			String date = val.getString("time");
			String day_str = date.substring(0, 10);
			int type = Integer.parseInt(val.getString("behavior_type")) - 1;
			if (type == 3) {
				buy_cnt++;
				buy_user_set.add(user_id);
				if (user_buy_time.containsKey(user_id)) {
					user_buy_time.get(user_id).add(day_str);
				} else {
					Set<String> t_day_set = new HashSet<String>();
					t_day_set.add(day_str);
					user_buy_time.put(user_id, t_day_set);
				}
			} else {
				contact_cnt++;
				contact_user_set.add(user_id);
			}
			long t_hour = getHourSpan("2014-12-17 00", date);
			if(t_hour < final_item_beh_hour[type])
				final_item_beh_hour[type] = t_hour;
		}
		buy_user_cnt = buy_user_set.size();
		contact_user_cnt = contact_user_set.size();
		for (Map.Entry<String, Set> entry : user_buy_time.entrySet()) {
			if(entry.getValue().size() != 1)
				back_user_cnt++;
		}
		result.set(0, key.getString("item_id"));
		result.set(1, buy_cnt);//总销量
		result.set(2, buy_user_cnt);//购买的用户数
		result.set(3, 1.0 * buy_cnt / contact_cnt);//品牌转化率
		result.set(4, 1.0 * buy_cnt / buy_user_cnt);//人均销量
		result.set(5, 1.0 * contact_user_cnt / buy_user_cnt);//品牌用户转化率
		result.set(6, back_user_cnt);//回头客数量
		result.set(7, 1.0 * back_user_cnt / buy_user_cnt);//回头客比率
		for(int i = 0; i < 4; ++i)
			result.set(8 + i, final_item_beh_hour[i]);//品牌最近被交互的时间
		context.write(result);
	}

	public static long getHourSpan(String sj1, String sj2) {
		SimpleDateFormat myFormatter = new SimpleDateFormat("yyyy-MM-dd HH");
		long day = 0;
		try {
			Date date1 = myFormatter.parse(sj1);
			Date date2 = myFormatter.parse(sj2);
			day = (date1.getTime() - date2.getTime()) / (60 * 60 * 1000);
		} catch (Exception e) {
			return -1;
		}
		return day;
	}

	public void cleanup(TaskContext arg0) throws IOException {

	}
}
